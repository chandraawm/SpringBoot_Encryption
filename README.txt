1. Introduction

Jasypt (Java Simplified Encryption) Spring Boot provides utilities for encrypting property sources in Boot applications.

In this article, we'll discuss how we can add jasypt-spring-boot‘s support and use it.

Jasypt is a Java library which allows developers to add basic encryption capabilities to projects with minimum effort, 
and without the need of having an in-depth knowledge about implementation details of encryption protocols.

2. Why Jasypt?

Jasypt (Java Simplified Encryption), provides encryption support for property sources in Spring Boot Applications.
It will help you to add basic encryption features to your projects with very fewer efforts and without writing any code with the help of a few additions in your project 
here and there. Springboot is a very powerful framework that will help you to add encryption capability without implementing any cryptography method.
Jasypt is highly configurable.

Steps To Add Encryption Using Jasypt: 

1. Add maven dependency of jasypt: In the pom.xml file, add maven dependency which can be found easily at maven repository.

   <dependency>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-spring-boot-starter</artifactId>
        <version>3.0.3</version>                                        
    </dependency>
    
 2.  **Steps For Config Password Encryption Using Jasypt**

      1. To generate encrypted password, download and extract jasypt from the below link.
             https://github.com/jasypt/jasypt/releases/download/jasypt-1.9.3/jasypt-1.9.3-dist.zip
      2. In the extracted folder , go to the folder jasypt-1.9.3\bin and execute below shown command. 
           Replace the value of **‘input’** with the password to be encrypted.
            The password field has the **master password** that needs to selected when configuring. 
            In this case **'dev-env-secret'** is used and the same value used across services.
            Using the default algorithm **PBEWITHHMACSHA512ANDAES_256** which needs a mandatory initialization vector (IV) generator. 
    
           * **Sample:** 
    
         > encrypt **input**=**"CACHEDBMPST123456"** password=**"dev-env-secret"** algorithm="PBEWITHHMACSHA512ANDAES_256"    ivGeneratorClassName="org.jasypt.iv.RandomIvGenerator"
    
          * **Sample Output:**
     
             ----ENVIRONMENT-----------------
      
            Runtime: Oracle Corporation OpenJDK 64-Bit Server VM 25.252-b09
      
            ----ARGUMENTS-------------------
      
            ivGeneratorClassName: org.jasypt.iv.RandomIvGenerator
      
            algorithm: PBEWITHHMACSHA512ANDAES_256
      
             input: CACHEDBMPST123456
      
            password: dev-env-secret
      
            ----OUTPUT----------------------
           
            D+jEFrSnJMl/tRjm7LxS9vVUjrtFpmY/AEeKsDxcvqqCkfVKiBwu88Hg7vMyqAEI/Jg+y2fOVGk1LQCeBCHV1A==
            
      3. From the result, copy the output value and copy to the password field in the yml file enclosed inside ENC() as shown below. 
      
       spring:
             datasource:
                 password: ENC(D+jEFrSnJMl/tRjm7LxS9vVUjrtFpmY/AEeKsDxcvqqCkfVKiBwu88Hg7vMyqAEI/Jg+y2fOVGk1LQCeBCHV1A==)
                 
      4. Set the master password to the services via a master-key.yml file.
   
            * **Sample master-key.yml**
                   jasypt:
                      encryptor:
                        password: dev-env-secret
    
Add the encrypted key in the config file (application.yml or application.properties): Now instead of adding the actual password ie. “abcd1234” as per the above eg., you need to add the encrypted value generated by either of the above methods. But how will the jasypt dependency understand that the particular property of the config file needs to be decrypted? Hence to make Jasypt aware of your encrypted values, it uses a convention which you need to add in the following format:
ENC(encrypted key): ENC(D+jEFrSnJMl/tRjm7LxS9vVUjrtFpmY/AEeKsDxcvqqCkfVKiBwu88Hg7vMyqAEI/Jg+y2fOVGk1LQCeBCHV1A==)
